function [cfg_artifact] = coSMIC_mergeThArtResults(cfg_artifact1, cfg_artifact2)
% coSMIC_MERGEARTIFACTRESULTS is a functions which merges two artifact
% specification structures into on common one. These function is useful,
% when e.g. for certain channels (V1, V2) another threshold value has to be
% used.
%
% Use as
%   [cfg_artifact] = coSMIC_mergeThArtResults(cfg_artifact1, cfg_artifact2)
%
% where the input data elements has to be a result of coSMIC_AUTOARTIFACT
%
% This function requires the fieldtrip toolbox.
%
% See also coSMIC_AUTOARTIFACT

% Copyright (C) 2019, Daniel Matthes, MPI CBS

% -------------------------------------------------------------------------
% check input - only threshold artifacts should be merged
% -------------------------------------------------------------------------
if isfield(cfg_artifact1, 'mother')
  if ~isfield(cfg_artifact1.mother.artfctdef, 'threshold')
    error('cfg_artifact1.mother has no threshold artifacts. Nothing to merge.');
  end
end

if isfield(cfg_artifact1, 'child')
  if ~isfield(cfg_artifact1.child.artfctdef, 'threshold')
    error('cfg_artifact1.child has no threshold artifacts. Nothing to merge.');
  end
end

if isfield(cfg_artifact2, 'mother')
  if ~isfield(cfg_artifact2.mother.artfctdef, 'threshold')
    error('cfg_artifact2.mother has no threshold artifacts. Nothing to merge.');
  end
end

if isfield(cfg_artifact2, 'child')
  if ~isfield(cfg_artifact2.child.artfctdef, 'threshold')
    error('cfg_artifact2.child has no threshold artifacts. Nothing to merge.');
  end
end

% test if both artifact specification structures were generated by using
% the same dataset
if isfield(cfg_artifact1, 'mother') && isfield(cfg_artifact2, 'mother')
  if size(cfg_artifact1.mother.artfctdef.threshold.trl, 1) ~= ...
      size(cfg_artifact2.mother.artfctdef.threshold.trl, 1)
    error(['The input structures have different trl specifications. '...
            'Merging is not possible!']);
  end
else
   if size(cfg_artifact1.child.artfctdef.threshold.trl, 1) ~= ...
      size(cfg_artifact2.child.artfctdef.threshold.trl, 1)
    error(['The input structures have different trl specifications. '...
            'Merging is not possible!']);
   end
end

% -------------------------------------------------------------------------
% merge input structures
% -------------------------------------------------------------------------
cfg_artifact = cfg_artifact1;

if isfield(cfg_artifact1, 'mother') && isfield(cfg_artifact2, 'mother')
  cfg_artifact.mother.artfctdef.threshold = removefields( ...
            cfg_artifact.mother.artfctdef.threshold, ...
            {'channel', 'range', 'artifact'});

  cfg_artifact.mother.artfctdef.threshold.channel1 = ...                    % add both channel specifications
    cfg_artifact1.mother.artfctdef.threshold.channel;
  cfg_artifact.mother.artfctdef.threshold.channel2 = ...
    cfg_artifact2.mother.artfctdef.threshold.channel;

  cfg_artifact.mother.artfctdef.threshold.range1 = ...                      % add both range values
    cfg_artifact1.mother.artfctdef.threshold.range;
  cfg_artifact.mother.artfctdef.threshold.range2 = ...
    cfg_artifact2.mother.artfctdef.threshold.range;

  artPart1 = [ cfg_artifact1.mother.artfctdef.threshold.artifact; ...       % concatenate artifact specifications
    cfg_artifact2.mother.artfctdef.threshold.artifact ];

  if ~isempty(artPart1)                                                     % sort values in a ascending order and remove duplicates
    [~,idx] = sort(artPart1(:,1));
    artPart1 = artPart1(idx, :);

    if size(artPart1, 1) > 1
      idx       = [true; sum(diff(artPart1),2) ~= 0];
      artPart1  = artPart1(idx,:);
    end
  end

  cfg_artifact.mother.artfctdef.threshold.artifact = artPart1;

  cfg_artifact.bad1Num = size(...                                           % update numbers of bad channels
                      cfg_artifact.mother.artfctdef.threshold.artifact, 1);
end

if isfield(cfg_artifact1, 'child') && isfield(cfg_artifact2, 'child')
  cfg_artifact.child.artfctdef.threshold = removefields( ...
    cfg_artifact.child.artfctdef.threshold, {'channel', 'range', 'artifact'});

  cfg_artifact.child.artfctdef.threshold.channel1 = ...                     % add both channel specifications
    cfg_artifact1.child.artfctdef.threshold.channel;
  cfg_artifact.child.artfctdef.threshold.channel2 = ...
    cfg_artifact2.child.artfctdef.threshold.channel;

  cfg_artifact.child.artfctdef.threshold.range1 = ...                       % add both range values
    cfg_artifact1.child.artfctdef.threshold.range;
  cfg_artifact.child.artfctdef.threshold.range2 = ...
    cfg_artifact2.child.artfctdef.threshold.range;

  artPart2 = [ cfg_artifact1.child.artfctdef.threshold.artifact; ...        % concatenate artifact specifications
    cfg_artifact2.child.artfctdef.threshold.artifact ];

  if ~isempty(artPart2)                                                     % sort values in a ascending order and remove duplicates
    [~,idx] = sort(artPart2(:,1));
    artPart2 = artPart2(idx, :);

    if size(artPart2, 1) > 1
      idx       = [true; sum(diff(artPart2),2) ~= 0];
      artPart2  = artPart2(idx,:);
    end
  end

  cfg_artifact.child.artfctdef.threshold.artifact = artPart2;

  cfg_artifact.bad2Num = size(...                                           % update numbers of bad channels
                      cfg_artifact.child.artfctdef.threshold.artifact, 1);
end

end
